/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "PQP.h"
#include "Build.h"
#include "BV.h"
#include "BVTQ.h"
#include "GetTime.h"
#include "MatVec.h"
#include "OBB_Disjoint.h"
#include "PQP_Compile.h"
#include "PQP_Internal.h"
#include "RectDist.h"
#include "Tri.h"
#include "TriDist.h"
#include "WrapperUtil.h"


typedef PQP_REAL DoubleArray;

SWIGINTERN DoubleArray *new_DoubleArray(int nelements){
  return new PQP_REAL[nelements]();
}
SWIGINTERN void delete_DoubleArray(DoubleArray *self){
  delete [] self;
}
SWIGINTERN PQP_REAL DoubleArray_getitem(DoubleArray *self,int index){
  return self[index];
}
SWIGINTERN void DoubleArray_setitem(DoubleArray *self,int index,PQP_REAL value){
  self[index] = value;
}
SWIGINTERN PQP_REAL *DoubleArray_cast(DoubleArray *self){
  return self;
}
SWIGINTERN DoubleArray *DoubleArray_frompointer(PQP_REAL *t){
  return (DoubleArray *) t;
}

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)PQP_OK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1ERR_1MODEL_1OUT_1OF_1MEMORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)PQP_ERR_MODEL_OUT_OF_MEMORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1ERR_1OUT_1OF_1MEMORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)PQP_ERR_OUT_OF_MEMORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1ERR_1UNPROCESSED_1MODEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)PQP_ERR_UNPROCESSED_MODEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1ERR_1BUILD_1OUT_1OF_1SEQUENCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)PQP_ERR_BUILD_OUT_OF_SEQUENCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1ERR_1BUILD_1EMPTY_1MODEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)PQP_ERR_BUILD_EMPTY_MODEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1ALL_1CONTACTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)PQP_ALL_CONTACTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1FIRST_1CONTACT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)PQP_FIRST_CONTACT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1Collide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jint jarg8) {
  jint jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  PQP_REAL **arg2 ;
  PQP_REAL *arg3 ;
  PQP_Model *arg4 = (PQP_Model *) 0 ;
  PQP_REAL **arg5 ;
  PQP_REAL *arg6 ;
  PQP_Model *arg7 = (PQP_Model *) 0 ;
  int arg8 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg7_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  arg2 = *(PQP_REAL ***)&jarg2; 
  arg3 = *(PQP_REAL **)&jarg3; 
  arg4 = *(PQP_Model **)&jarg4; 
  arg5 = *(PQP_REAL ***)&jarg5; 
  arg6 = *(PQP_REAL **)&jarg6; 
  arg7 = *(PQP_Model **)&jarg7; 
  arg8 = (int)jarg8; 
  result = (int)PQP_Collide(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_build_1model(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  result = (int)build_model(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_BV_1R_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  BV *arg1 = (BV *) 0 ;
  PQP_REAL (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BV **)&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  {
    PQP_REAL (*inp)[3] = (PQP_REAL (*)[3])(arg2);
    PQP_REAL (*dest)[3] = (PQP_REAL (*)[3])(arg1->R);
    size_t ii = 0;
    for (; ii < 3; ++ii) {
      PQP_REAL *ip = inp[ii];
      PQP_REAL *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 3; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_BV_1R_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BV *arg1 = (BV *) 0 ;
  PQP_REAL (*result)[3] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BV **)&jarg1; 
  result = (PQP_REAL (*)[3])(PQP_REAL (*)[3]) ((arg1)->R);
  *(PQP_REAL (**)[3])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_BV_1first_1child_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BV *arg1 = (BV *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BV **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first_child = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_BV_1first_1child_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BV *arg1 = (BV *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BV **)&jarg1; 
  result = (int) ((arg1)->first_child);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_new_1BV(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BV *)new BV();
  *(BV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_delete_1BV(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BV *arg1 = (BV *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BV **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_BV_1Leaf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BV *arg1 = (BV *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BV **)&jarg1; 
  result = (int)(arg1)->Leaf();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_BV_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BV *arg1 = (BV *) 0 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BV **)&jarg1; 
  result = (PQP_REAL)(arg1)->GetSize();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_BV_1FitToTris(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  BV *arg1 = (BV *) 0 ;
  PQP_REAL (*arg2)[3] ;
  Tri *arg3 = (Tri *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(BV **)&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  arg3 = *(Tri **)&jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->FitToTris((PQP_REAL (*)[3])arg2,arg3,arg4);
  
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_BV_1Overlap(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  PQP_REAL (*arg1)[3] ;
  PQP_REAL *arg2 ;
  BV *arg3 = (BV *) 0 ;
  BV *arg4 = (BV *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  arg3 = *(BV **)&jarg3; 
  arg4 = *(BV **)&jarg4; 
  result = (int)BV_Overlap((double (*)[3])arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_LChild(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)LChild(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_Parent(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)Parent(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_BVT_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BVT *arg1 = (BVT *) 0 ;
  PQP_REAL arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVT **)&jarg1; 
  arg2 = (PQP_REAL)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_BVT_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BVT *arg1 = (BVT *) 0 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVT **)&jarg1; 
  result = (PQP_REAL) ((arg1)->d);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_BVT_1b1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BVT *arg1 = (BVT *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVT **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->b1 = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_BVT_1b1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BVT *arg1 = (BVT *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVT **)&jarg1; 
  result = (int) ((arg1)->b1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_BVT_1b2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BVT *arg1 = (BVT *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVT **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->b2 = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_BVT_1b2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BVT *arg1 = (BVT *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVT **)&jarg1; 
  result = (int) ((arg1)->b2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_BVT_1R_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  BVT *arg1 = (BVT *) 0 ;
  PQP_REAL (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVT **)&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  {
    PQP_REAL (*inp)[3] = (PQP_REAL (*)[3])(arg2);
    PQP_REAL (*dest)[3] = (PQP_REAL (*)[3])(arg1->R);
    size_t ii = 0;
    for (; ii < 3; ++ii) {
      PQP_REAL *ip = inp[ii];
      PQP_REAL *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 3; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_BVT_1R_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BVT *arg1 = (BVT *) 0 ;
  PQP_REAL (*result)[3] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVT **)&jarg1; 
  result = (PQP_REAL (*)[3])(PQP_REAL (*)[3]) ((arg1)->R);
  *(PQP_REAL (**)[3])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_BVT_1T_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  BVT *arg1 = (BVT *) 0 ;
  PQP_REAL *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVT **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  {
    size_t ii;
    PQP_REAL *b = (PQP_REAL *) arg1->T;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((PQP_REAL *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_BVT_1T_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BVT *arg1 = (BVT *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVT **)&jarg1; 
  result = (PQP_REAL *)(PQP_REAL *) ((arg1)->T);
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_BVT_1pindex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BVT *arg1 = (BVT *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVT **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pindex = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_BVT_1pindex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BVT *arg1 = (BVT *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVT **)&jarg1; 
  result = (int) ((arg1)->pindex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_new_1BVT(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BVT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BVT *)new BVT();
  *(BVT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_delete_1BVT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BVT *arg1 = (BVT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BVT **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_new_1BVTQ(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BVTQ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BVTQ *)new BVTQ(arg1);
  *(BVTQ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_delete_1BVTQ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BVTQ *arg1 = (BVTQ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BVTQ **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_BVTQ_1Empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BVTQ *arg1 = (BVTQ *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVTQ **)&jarg1; 
  result = (int)(arg1)->Empty();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_BVTQ_1GetNumTests(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BVTQ *arg1 = (BVTQ *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVTQ **)&jarg1; 
  result = (int)(arg1)->GetNumTests();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_BVTQ_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BVTQ *arg1 = (BVTQ *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVTQ **)&jarg1; 
  result = (int)(arg1)->GetSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_BVTQ_1MinTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BVTQ *arg1 = (BVTQ *) 0 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVTQ **)&jarg1; 
  result = (PQP_REAL)(arg1)->MinTest();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_BVTQ_1ExtractMinTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BVTQ *arg1 = (BVTQ *) 0 ;
  BVT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BVTQ **)&jarg1; 
  result = (arg1)->ExtractMinTest();
  *(BVT **)&jresult = new BVT((const BVT &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_BVTQ_1AddTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BVTQ *arg1 = (BVTQ *) 0 ;
  BVT *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BVTQ **)&jarg1; 
  arg2 = *(BVT **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BVT & reference is null");
    return ;
  } 
  (arg1)->AddTest(*arg2);
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_GetTime(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)GetTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_M_1PI_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  result = (PQP_REAL)(PQP_REAL)M_PI;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_Mprintg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PQP_REAL (*arg1)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  Mprintg((double const (*)[3])arg1);
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_Mfprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  FILE *arg1 = (FILE *) 0 ;
  PQP_REAL (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  Mfprint(arg1,(double const (*)[3])arg2);
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_Mprint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PQP_REAL (*arg1)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  Mprint((double const (*)[3])arg1);
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_Vprintg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PQP_REAL *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  Vprintg((double const (*))arg1);
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_Vfprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  FILE *arg1 = (FILE *) 0 ;
  PQP_REAL *arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  Vfprint(arg1,(double const (*))arg2);
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_Vprint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PQP_REAL *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  Vprint((double const (*))arg1);
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_Midentity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PQP_REAL (*arg1)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  Midentity((double (*)[3])arg1);
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_Videntity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PQP_REAL *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  Videntity(arg1);
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_McM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  PQP_REAL (*arg1)[3] ;
  PQP_REAL (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  McM((double (*)[3])arg1,(double const (*)[3])arg2);
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_MTcM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  PQP_REAL (*arg1)[3] ;
  PQP_REAL (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  MTcM((double (*)[3])arg1,(double const (*)[3])arg2);
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_VcV(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  PQP_REAL *arg1 ;
  PQP_REAL *arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  VcV(arg1,(double const (*))arg2);
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_McolcV(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  PQP_REAL *arg1 ;
  PQP_REAL (*arg2)[3] ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  arg3 = (int)jarg3; 
  McolcV(arg1,(double const (*)[3])arg2,arg3);
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_McolcMcol(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  PQP_REAL (*arg1)[3] ;
  int arg2 ;
  PQP_REAL (*arg3)[3] ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(PQP_REAL (**)[3])&jarg3; 
  arg4 = (int)jarg4; 
  McolcMcol((double (*)[3])arg1,arg2,(double const (*)[3])arg3,arg4);
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_MxMpV(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  PQP_REAL (*arg1)[3] ;
  PQP_REAL (*arg2)[3] ;
  PQP_REAL (*arg3)[3] ;
  PQP_REAL *arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  arg3 = *(PQP_REAL (**)[3])&jarg3; 
  arg4 = *(PQP_REAL **)&jarg4; 
  MxMpV((double (*)[3])arg1,(double const (*)[3])arg2,(double const (*)[3])arg3,(double const (*))arg4);
  
  
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_MxM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  PQP_REAL (*arg1)[3] ;
  PQP_REAL (*arg2)[3] ;
  PQP_REAL (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  arg3 = *(PQP_REAL (**)[3])&jarg3; 
  MxM((double (*)[3])arg1,(double const (*)[3])arg2,(double const (*)[3])arg3);
  
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_MxMT(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  PQP_REAL (*arg1)[3] ;
  PQP_REAL (*arg2)[3] ;
  PQP_REAL (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  arg3 = *(PQP_REAL (**)[3])&jarg3; 
  MxMT((double (*)[3])arg1,(double const (*)[3])arg2,(double const (*)[3])arg3);
  
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_MTxM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  PQP_REAL (*arg1)[3] ;
  PQP_REAL (*arg2)[3] ;
  PQP_REAL (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  arg3 = *(PQP_REAL (**)[3])&jarg3; 
  MTxM((double (*)[3])arg1,(double const (*)[3])arg2,(double const (*)[3])arg3);
  
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_MxV(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  PQP_REAL *arg1 ;
  PQP_REAL (*arg2)[3] ;
  PQP_REAL *arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  arg3 = *(PQP_REAL **)&jarg3; 
  MxV(arg1,(double const (*)[3])arg2,(double const (*))arg3);
  
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_MxVpV(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  PQP_REAL *arg1 ;
  PQP_REAL (*arg2)[3] ;
  PQP_REAL *arg3 ;
  PQP_REAL *arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  arg3 = *(PQP_REAL **)&jarg3; 
  arg4 = *(PQP_REAL **)&jarg4; 
  MxVpV(arg1,(double const (*)[3])arg2,(double const (*))arg3,(double const (*))arg4);
  
  
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_sMxVpV(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  PQP_REAL *arg1 ;
  PQP_REAL arg2 ;
  PQP_REAL (*arg3)[3] ;
  PQP_REAL *arg4 ;
  PQP_REAL *arg5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = (PQP_REAL)jarg2; 
  arg3 = *(PQP_REAL (**)[3])&jarg3; 
  arg4 = *(PQP_REAL **)&jarg4; 
  arg5 = *(PQP_REAL **)&jarg5; 
  sMxVpV(arg1,arg2,(double const (*)[3])arg3,(double const (*))arg4,(double const (*))arg5);
  
  
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_MTxV(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  PQP_REAL *arg1 ;
  PQP_REAL (*arg2)[3] ;
  PQP_REAL *arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  arg3 = *(PQP_REAL **)&jarg3; 
  MTxV(arg1,(double const (*)[3])arg2,(double const (*))arg3);
  
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_sMTxV(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4) {
  PQP_REAL *arg1 ;
  PQP_REAL arg2 ;
  PQP_REAL (*arg3)[3] ;
  PQP_REAL *arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = (PQP_REAL)jarg2; 
  arg3 = *(PQP_REAL (**)[3])&jarg3; 
  arg4 = *(PQP_REAL **)&jarg4; 
  sMTxV(arg1,arg2,(double const (*)[3])arg3,(double const (*))arg4);
  
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_sMxV(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4) {
  PQP_REAL *arg1 ;
  PQP_REAL arg2 ;
  PQP_REAL (*arg3)[3] ;
  PQP_REAL *arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = (PQP_REAL)jarg2; 
  arg3 = *(PQP_REAL (**)[3])&jarg3; 
  arg4 = *(PQP_REAL **)&jarg4; 
  sMxV(arg1,arg2,(double const (*)[3])arg3,(double const (*))arg4);
  
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_VmV(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  PQP_REAL *arg1 ;
  PQP_REAL *arg2 ;
  PQP_REAL *arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  arg3 = *(PQP_REAL **)&jarg3; 
  VmV(arg1,(double const (*))arg2,(double const (*))arg3);
  
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_VpV(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  PQP_REAL *arg1 ;
  PQP_REAL *arg2 ;
  PQP_REAL *arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  arg3 = *(PQP_REAL **)&jarg3; 
  VpV(arg1,(double const (*))arg2,(double const (*))arg3);
  
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_VpVxS(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jdouble jarg4) {
  PQP_REAL *arg1 ;
  PQP_REAL *arg2 ;
  PQP_REAL *arg3 ;
  PQP_REAL arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  arg3 = *(PQP_REAL **)&jarg3; 
  arg4 = (PQP_REAL)jarg4; 
  VpVxS(arg1,(double const (*))arg2,(double const (*))arg3,arg4);
  
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_MskewV(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  PQP_REAL (*arg1)[3] ;
  PQP_REAL *arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  MskewV((double (*)[3])arg1,(double const (*))arg2);
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_VcrossV(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  PQP_REAL *arg1 ;
  PQP_REAL *arg2 ;
  PQP_REAL *arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  arg3 = *(PQP_REAL **)&jarg3; 
  VcrossV(arg1,(double const (*))arg2,(double const (*))arg3);
  
  
  
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_Vlength(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  PQP_REAL *arg1 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  result = (PQP_REAL)Vlength(arg1);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_Vnormalize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PQP_REAL *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  Vnormalize(arg1);
  
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_VdotV(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  PQP_REAL *arg1 ;
  PQP_REAL *arg2 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  result = (PQP_REAL)VdotV((double const (*))arg1,(double const (*))arg2);
  jresult = (jdouble)result; 
  
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_VdistV2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  PQP_REAL *arg1 ;
  PQP_REAL *arg2 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  result = (PQP_REAL)VdistV2((double const (*))arg1,(double const (*))arg2);
  jresult = (jdouble)result; 
  
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_VxS(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  PQP_REAL *arg1 ;
  PQP_REAL *arg2 ;
  PQP_REAL arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  arg3 = (PQP_REAL)jarg3; 
  VxS(arg1,(double const (*))arg2,arg3);
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_MRotZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  PQP_REAL (*arg1)[3] ;
  PQP_REAL arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = (PQP_REAL)jarg2; 
  MRotZ((double (*)[3])arg1,arg2);
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_MRotX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  PQP_REAL (*arg1)[3] ;
  PQP_REAL arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = (PQP_REAL)jarg2; 
  MRotX((double (*)[3])arg1,arg2);
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_MRotY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  PQP_REAL (*arg1)[3] ;
  PQP_REAL arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = (PQP_REAL)jarg2; 
  MRotY((double (*)[3])arg1,arg2);
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_MVtoOGL(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  double *arg1 ;
  PQP_REAL (*arg2)[3] ;
  PQP_REAL *arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  arg3 = *(PQP_REAL **)&jarg3; 
  MVtoOGL(arg1,(double const (*)[3])arg2,(double const (*))arg3);
  
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_OGLtoMV(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  PQP_REAL (*arg1)[3] ;
  PQP_REAL *arg2 ;
  double *arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  OGLtoMV((double (*)[3])arg1,arg2,(double const (*))arg3);
  
  
  
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_QX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)QX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_QY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)QY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_QZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)QZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_QW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)QW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_MRotQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  PQP_REAL (*arg1)[3] ;
  PQP_REAL *arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  MRotQ((double (*)[3])arg1,arg2);
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_Mqinverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  PQP_REAL (*arg1)[3] ;
  PQP_REAL (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  Mqinverse((double (*)[3])arg1,(double (*)[3])arg2);
  
  
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_Meigen(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  PQP_REAL (*arg1)[3] ;
  PQP_REAL *arg2 ;
  PQP_REAL (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  arg3 = *(PQP_REAL (**)[3])&jarg3; 
  Meigen((double (*)[3])arg1,arg2,(double (*)[3])arg3);
  
  
  
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_obb_1disjoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  PQP_REAL (*arg1)[3] ;
  PQP_REAL *arg2 ;
  PQP_REAL *arg3 ;
  PQP_REAL *arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  arg3 = *(PQP_REAL **)&jarg3; 
  arg4 = *(PQP_REAL **)&jarg4; 
  result = (int)obb_disjoint((double (*)[3])arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_pqp_PQPJNI_sqrt(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jfloat jresult = 0 ;
  float arg1 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (float)sqrt(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_pqp_PQPJNI_cos(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jfloat jresult = 0 ;
  float arg1 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (float)cos(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_pqp_PQPJNI_sin(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jfloat jresult = 0 ;
  float arg1 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (float)sin(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_pqp_PQPJNI_fabs(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jfloat jresult = 0 ;
  float arg1 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (float)fabs(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_RSS_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_OBB_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1BV_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1|2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1Model_1build_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->build_state = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1Model_1build_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  result = (int) ((arg1)->build_state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1Model_1tris_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  Tri *arg2 = (Tri *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PQP_Model **)&jarg1; 
  arg2 = *(Tri **)&jarg2; 
  if (arg1) (arg1)->tris = arg2;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1Model_1tris_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  Tri *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  result = (Tri *) ((arg1)->tris);
  *(Tri **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1Model_1num_1tris_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_tris = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1Model_1num_1tris_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  result = (int) ((arg1)->num_tris);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1Model_1num_1tris_1alloced_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_tris_alloced = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1Model_1num_1tris_1alloced_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  result = (int) ((arg1)->num_tris_alloced);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1Model_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  BV *arg2 = (BV *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PQP_Model **)&jarg1; 
  arg2 = *(BV **)&jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1Model_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  BV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  result = (BV *) ((arg1)->b);
  *(BV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1Model_1num_1bvs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_bvs = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1Model_1num_1bvs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  result = (int) ((arg1)->num_bvs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1Model_1num_1bvs_1alloced_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_bvs_alloced = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1Model_1num_1bvs_1alloced_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  result = (int) ((arg1)->num_bvs_alloced);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1Model_1last_1tri_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  Tri *arg2 = (Tri *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PQP_Model **)&jarg1; 
  arg2 = *(Tri **)&jarg2; 
  if (arg1) (arg1)->last_tri = arg2;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1Model_1last_1tri_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  Tri *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  result = (Tri *) ((arg1)->last_tri);
  *(Tri **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1Model_1child(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int arg2 ;
  BV *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (BV *)(arg1)->child(arg2);
  *(BV **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_new_1PQP_1Model(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PQP_Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PQP_Model *)new PQP_Model();
  *(PQP_Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_delete_1PQP_1Model(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_Model **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1Model_1BeginModel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->BeginModel(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1Model_1BeginModel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  result = (int)(arg1)->BeginModel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1Model_1AddTri(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  jint jresult = 0 ;
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  PQP_REAL *arg2 = (PQP_REAL *) 0 ;
  PQP_REAL *arg3 = (PQP_REAL *) 0 ;
  PQP_REAL *arg4 = (PQP_REAL *) 0 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  arg3 = *(PQP_REAL **)&jarg3; 
  arg4 = *(PQP_REAL **)&jarg4; 
  arg5 = (int)jarg5; 
  result = (int)(arg1)->AddTri((PQP_REAL const *)arg2,(PQP_REAL const *)arg3,(PQP_REAL const *)arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1Model_1EndModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  result = (int)(arg1)->EndModel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1Model_1MemUsage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  PQP_Model *arg1 = (PQP_Model *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->MemUsage(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_CollisionPair_1id1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CollisionPair *arg1 = (CollisionPair *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollisionPair **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id1 = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_CollisionPair_1id1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CollisionPair *arg1 = (CollisionPair *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollisionPair **)&jarg1; 
  result = (int) ((arg1)->id1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_CollisionPair_1id2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CollisionPair *arg1 = (CollisionPair *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollisionPair **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id2 = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_CollisionPair_1id2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CollisionPair *arg1 = (CollisionPair *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CollisionPair **)&jarg1; 
  result = (int) ((arg1)->id2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_new_1CollisionPair(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CollisionPair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CollisionPair *)new CollisionPair();
  *(CollisionPair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_delete_1CollisionPair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CollisionPair *arg1 = (CollisionPair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CollisionPair **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1num_1bv_1tests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_bv_tests = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1num_1bv_1tests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  result = (int) ((arg1)->num_bv_tests);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1num_1tri_1tests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_tri_tests = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1num_1tri_1tests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  result = (int) ((arg1)->num_tri_tests);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1query_1time_1secs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->query_time_secs = arg2;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1query_1time_1secs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  result = (double) ((arg1)->query_time_secs);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1R_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  PQP_REAL (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  {
    PQP_REAL (*inp)[3] = (PQP_REAL (*)[3])(arg2);
    PQP_REAL (*dest)[3] = (PQP_REAL (*)[3])(arg1->R);
    size_t ii = 0;
    for (; ii < 3; ++ii) {
      PQP_REAL *ip = inp[ii];
      PQP_REAL *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 3; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1R_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  PQP_REAL (*result)[3] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  result = (PQP_REAL (*)[3])(PQP_REAL (*)[3]) ((arg1)->R);
  *(PQP_REAL (**)[3])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1T_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  PQP_REAL *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  {
    size_t ii;
    PQP_REAL *b = (PQP_REAL *) arg1->T;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((PQP_REAL *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1T_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  result = (PQP_REAL *)(PQP_REAL *) ((arg1)->T);
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1num_1pairs_1alloced_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_pairs_alloced = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1num_1pairs_1alloced_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  result = (int) ((arg1)->num_pairs_alloced);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1num_1pairs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_pairs = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1num_1pairs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  result = (int) ((arg1)->num_pairs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1pairs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  CollisionPair *arg2 = (CollisionPair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  arg2 = *(CollisionPair **)&jarg2; 
  if (arg1) (arg1)->pairs = arg2;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1pairs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  CollisionPair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  result = (CollisionPair *) ((arg1)->pairs);
  *(CollisionPair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1SizeTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SizeTo(arg2);
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1Add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Add(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_new_1PQP_1CollideResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PQP_CollideResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PQP_CollideResult *)new PQP_CollideResult();
  *(PQP_CollideResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_delete_1PQP_1CollideResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1NumBVTests(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  result = (int)(arg1)->NumBVTests();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1NumTriTests(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  result = (int)(arg1)->NumTriTests();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1QueryTimeSecs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  result = (double)(arg1)->QueryTimeSecs();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1FreePairsList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  (arg1)->FreePairsList();
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1Colliding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  result = (int)(arg1)->Colliding();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1NumPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  result = (int)(arg1)->NumPairs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1Id1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->Id1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1CollideResult_1Id2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  PQP_CollideResult *arg1 = (PQP_CollideResult *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_CollideResult **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->Id2(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1num_1bv_1tests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_bv_tests = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1num_1bv_1tests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (int) ((arg1)->num_bv_tests);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1num_1tri_1tests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_tri_tests = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1num_1tri_1tests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (int) ((arg1)->num_tri_tests);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1query_1time_1secs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->query_time_secs = arg2;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1query_1time_1secs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (double) ((arg1)->query_time_secs);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1R_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  {
    PQP_REAL (*inp)[3] = (PQP_REAL (*)[3])(arg2);
    PQP_REAL (*dest)[3] = (PQP_REAL (*)[3])(arg1->R);
    size_t ii = 0;
    for (; ii < 3; ++ii) {
      PQP_REAL *ip = inp[ii];
      PQP_REAL *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 3; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1R_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL (*result)[3] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (PQP_REAL (*)[3])(PQP_REAL (*)[3]) ((arg1)->R);
  *(PQP_REAL (**)[3])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1T_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  {
    size_t ii;
    PQP_REAL *b = (PQP_REAL *) arg1->T;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((PQP_REAL *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1T_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (PQP_REAL *)(PQP_REAL *) ((arg1)->T);
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1rel_1err_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  arg2 = (PQP_REAL)jarg2; 
  if (arg1) (arg1)->rel_err = arg2;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1rel_1err_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (PQP_REAL) ((arg1)->rel_err);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1abs_1err_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  arg2 = (PQP_REAL)jarg2; 
  if (arg1) (arg1)->abs_err = arg2;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1abs_1err_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (PQP_REAL) ((arg1)->abs_err);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1distance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  arg2 = (PQP_REAL)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1distance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (PQP_REAL) ((arg1)->distance);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1p1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  {
    size_t ii;
    PQP_REAL *b = (PQP_REAL *) arg1->p1;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((PQP_REAL *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1p1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (PQP_REAL *)(PQP_REAL *) ((arg1)->p1);
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1p2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  {
    size_t ii;
    PQP_REAL *b = (PQP_REAL *) arg1->p2;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((PQP_REAL *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1p2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (PQP_REAL *)(PQP_REAL *) ((arg1)->p2);
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1qsize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->qsize = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1qsize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (int) ((arg1)->qsize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1NumBVTests(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (int)(arg1)->NumBVTests();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1NumTriTests(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (int)(arg1)->NumTriTests();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1QueryTimeSecs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (double)(arg1)->QueryTimeSecs();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1Distance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (PQP_REAL)(arg1)->Distance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1P1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (PQP_REAL *)(arg1)->P1();
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1DistanceResult_1P2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  result = (PQP_REAL *)(arg1)->P2();
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_new_1PQP_1DistanceResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PQP_DistanceResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PQP_DistanceResult *)new PQP_DistanceResult();
  *(PQP_DistanceResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_delete_1PQP_1DistanceResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PQP_DistanceResult *arg1 = (PQP_DistanceResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_DistanceResult **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1num_1bv_1tests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_bv_tests = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1num_1bv_1tests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (int) ((arg1)->num_bv_tests);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1num_1tri_1tests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_tri_tests = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1num_1tri_1tests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (int) ((arg1)->num_tri_tests);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1query_1time_1secs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->query_time_secs = arg2;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1query_1time_1secs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (double) ((arg1)->query_time_secs);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1R_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  PQP_REAL (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  arg2 = *(PQP_REAL (**)[3])&jarg2; 
  {
    PQP_REAL (*inp)[3] = (PQP_REAL (*)[3])(arg2);
    PQP_REAL (*dest)[3] = (PQP_REAL (*)[3])(arg1->R);
    size_t ii = 0;
    for (; ii < 3; ++ii) {
      PQP_REAL *ip = inp[ii];
      PQP_REAL *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 3; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1R_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  PQP_REAL (*result)[3] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (PQP_REAL (*)[3])(PQP_REAL (*)[3]) ((arg1)->R);
  *(PQP_REAL (**)[3])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1T_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  PQP_REAL *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  {
    size_t ii;
    PQP_REAL *b = (PQP_REAL *) arg1->T;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((PQP_REAL *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1T_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (PQP_REAL *)(PQP_REAL *) ((arg1)->T);
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1closer_1than_1tolerance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->closer_than_tolerance = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1closer_1than_1tolerance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (int) ((arg1)->closer_than_tolerance);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1tolerance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  PQP_REAL arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  arg2 = (PQP_REAL)jarg2; 
  if (arg1) (arg1)->tolerance = arg2;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1tolerance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (PQP_REAL) ((arg1)->tolerance);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1distance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  PQP_REAL arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  arg2 = (PQP_REAL)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1distance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (PQP_REAL) ((arg1)->distance);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1p1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  PQP_REAL *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  {
    size_t ii;
    PQP_REAL *b = (PQP_REAL *) arg1->p1;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((PQP_REAL *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1p1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (PQP_REAL *)(PQP_REAL *) ((arg1)->p1);
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1p2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  PQP_REAL *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  {
    size_t ii;
    PQP_REAL *b = (PQP_REAL *) arg1->p2;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((PQP_REAL *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1p2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (PQP_REAL *)(PQP_REAL *) ((arg1)->p2);
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1qsize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->qsize = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1qsize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (int) ((arg1)->qsize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1NumBVTests(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (int)(arg1)->NumBVTests();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1NumTriTests(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (int)(arg1)->NumTriTests();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1QueryTimeSecs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (double)(arg1)->QueryTimeSecs();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1Distance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (PQP_REAL)(arg1)->Distance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1P1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (PQP_REAL *)(arg1)->P1();
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1P2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (PQP_REAL *)(arg1)->P2();
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_PQP_1ToleranceResult_1CloserThanTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  result = (int)(arg1)->CloserThanTolerance();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_new_1PQP_1ToleranceResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PQP_ToleranceResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PQP_ToleranceResult *)new PQP_ToleranceResult();
  *(PQP_ToleranceResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_delete_1PQP_1ToleranceResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PQP_ToleranceResult *arg1 = (PQP_ToleranceResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_ToleranceResult **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_ClipToRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  PQP_REAL *arg1 = 0 ;
  PQP_REAL *arg2 = 0 ;
  PQP_REAL *arg3 = 0 ;
  PQP_REAL temp2 ;
  PQP_REAL temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PQP_REAL & reference is null");
    return ;
  } 
  temp2 = (PQP_REAL)jarg2; 
  arg2 = &temp2; 
  temp3 = (PQP_REAL)jarg3; 
  arg3 = &temp3; 
  ClipToRange(*arg1,(double const &)*arg2,(double const &)*arg3);
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_SegCoords(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  PQP_REAL *arg1 = 0 ;
  PQP_REAL *arg2 = 0 ;
  PQP_REAL *arg3 = 0 ;
  PQP_REAL *arg4 = 0 ;
  PQP_REAL *arg5 = 0 ;
  PQP_REAL *arg6 = 0 ;
  PQP_REAL *arg7 = 0 ;
  PQP_REAL temp3 ;
  PQP_REAL temp4 ;
  PQP_REAL temp5 ;
  PQP_REAL temp6 ;
  PQP_REAL temp7 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PQP_REAL & reference is null");
    return ;
  } 
  arg2 = *(PQP_REAL **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PQP_REAL & reference is null");
    return ;
  } 
  temp3 = (PQP_REAL)jarg3; 
  arg3 = &temp3; 
  temp4 = (PQP_REAL)jarg4; 
  arg4 = &temp4; 
  temp5 = (PQP_REAL)jarg5; 
  arg5 = &temp5; 
  temp6 = (PQP_REAL)jarg6; 
  arg6 = &temp6; 
  temp7 = (PQP_REAL)jarg7; 
  arg7 = &temp7; 
  SegCoords(*arg1,*arg2,(double const &)*arg3,(double const &)*arg4,(double const &)*arg5,(double const &)*arg6,(double const &)*arg7);
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_InVoronoi(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jint jresult = 0 ;
  PQP_REAL *arg1 = 0 ;
  PQP_REAL *arg2 = 0 ;
  PQP_REAL *arg3 = 0 ;
  PQP_REAL *arg4 = 0 ;
  PQP_REAL *arg5 = 0 ;
  PQP_REAL *arg6 = 0 ;
  PQP_REAL *arg7 = 0 ;
  PQP_REAL temp1 ;
  PQP_REAL temp2 ;
  PQP_REAL temp3 ;
  PQP_REAL temp4 ;
  PQP_REAL temp5 ;
  PQP_REAL temp6 ;
  PQP_REAL temp7 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  temp1 = (PQP_REAL)jarg1; 
  arg1 = &temp1; 
  temp2 = (PQP_REAL)jarg2; 
  arg2 = &temp2; 
  temp3 = (PQP_REAL)jarg3; 
  arg3 = &temp3; 
  temp4 = (PQP_REAL)jarg4; 
  arg4 = &temp4; 
  temp5 = (PQP_REAL)jarg5; 
  arg5 = &temp5; 
  temp6 = (PQP_REAL)jarg6; 
  arg6 = &temp6; 
  temp7 = (PQP_REAL)jarg7; 
  arg7 = &temp7; 
  result = (int)InVoronoi((double const &)*arg1,(double const &)*arg2,(double const &)*arg3,(double const &)*arg4,(double const &)*arg5,(double const &)*arg6,(double const &)*arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_RectDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jdouble jresult = 0 ;
  PQP_REAL (*arg1)[3] ;
  PQP_REAL *arg2 ;
  PQP_REAL *arg3 ;
  PQP_REAL *arg4 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL (**)[3])&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  arg3 = *(PQP_REAL **)&jarg3; 
  arg4 = *(PQP_REAL **)&jarg4; 
  result = (PQP_REAL)RectDist((double (*)[3])arg1,arg2,arg3,arg4);
  jresult = (jdouble)result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_Tri_1p1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Tri *arg1 = (Tri *) 0 ;
  PQP_REAL *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tri **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  {
    size_t ii;
    PQP_REAL *b = (PQP_REAL *) arg1->p1;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((PQP_REAL *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_Tri_1p1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tri *arg1 = (Tri *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tri **)&jarg1; 
  result = (PQP_REAL *)(PQP_REAL *) ((arg1)->p1);
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_Tri_1p2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Tri *arg1 = (Tri *) 0 ;
  PQP_REAL *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tri **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  {
    size_t ii;
    PQP_REAL *b = (PQP_REAL *) arg1->p2;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((PQP_REAL *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_Tri_1p2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tri *arg1 = (Tri *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tri **)&jarg1; 
  result = (PQP_REAL *)(PQP_REAL *) ((arg1)->p2);
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_Tri_1p3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Tri *arg1 = (Tri *) 0 ;
  PQP_REAL *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tri **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  {
    size_t ii;
    PQP_REAL *b = (PQP_REAL *) arg1->p3;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((PQP_REAL *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_Tri_1p3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tri *arg1 = (Tri *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tri **)&jarg1; 
  result = (PQP_REAL *)(PQP_REAL *) ((arg1)->p3);
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_Tri_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Tri *arg1 = (Tri *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tri **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_pqp_PQPJNI_Tri_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Tri *arg1 = (Tri *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tri **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_new_1Tri(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Tri *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Tri *)new Tri();
  *(Tri **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_delete_1Tri(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tri *arg1 = (Tri *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tri **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_TriDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jdouble jresult = 0 ;
  PQP_REAL *arg1 ;
  PQP_REAL *arg2 ;
  PQP_REAL (*arg3)[3] ;
  PQP_REAL (*arg4)[3] ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  arg2 = *(PQP_REAL **)&jarg2; 
  arg3 = *(PQP_REAL (**)[3])&jarg3; 
  arg4 = *(PQP_REAL (**)[3])&jarg4; 
  result = (PQP_REAL)TriDist(arg1,arg2,(double const (*)[3])arg3,(double const (*)[3])arg4);
  jresult = (jdouble)result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_WrapperUtil_1newPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  WrapperUtil *arg1 = (WrapperUtil *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WrapperUtil **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (PQP_REAL *)(arg1)->newPoint(arg2,arg3,arg4);
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_WrapperUtil_1new3x3Mat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10) {
  jlong jresult = 0 ;
  WrapperUtil *arg1 = (WrapperUtil *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  PQP_REAL **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WrapperUtil **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  result = (PQP_REAL **)(arg1)->new3x3Mat(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(PQP_REAL ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_WrapperUtil_1newI3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  WrapperUtil *arg1 = (WrapperUtil *) 0 ;
  PQP_REAL **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WrapperUtil **)&jarg1; 
  result = (PQP_REAL **)(arg1)->newI3();
  *(PQP_REAL ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_new_1WrapperUtil(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  WrapperUtil *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (WrapperUtil *)new WrapperUtil();
  *(WrapperUtil **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_delete_1WrapperUtil(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WrapperUtil *arg1 = (WrapperUtil *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WrapperUtil **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_new_1DoubleArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  DoubleArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (DoubleArray *)new_DoubleArray(arg1);
  *(DoubleArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_delete_1DoubleArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DoubleArray **)&jarg1; 
  delete_DoubleArray(arg1);
}


SWIGEXPORT jdouble JNICALL Java_pqp_PQPJNI_DoubleArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  int arg2 ;
  PQP_REAL result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DoubleArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (PQP_REAL)DoubleArray_getitem(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pqp_PQPJNI_DoubleArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  int arg2 ;
  PQP_REAL arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DoubleArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (PQP_REAL)jarg3; 
  DoubleArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_DoubleArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  PQP_REAL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DoubleArray **)&jarg1; 
  result = (PQP_REAL *)DoubleArray_cast(arg1);
  *(PQP_REAL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pqp_PQPJNI_DoubleArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  PQP_REAL *arg1 = (PQP_REAL *) 0 ;
  DoubleArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PQP_REAL **)&jarg1; 
  result = (DoubleArray *)DoubleArray_frompointer(arg1);
  *(DoubleArray **)&jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

